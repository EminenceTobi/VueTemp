(function () {
    // Define our constructor
    var pop;
    this.credipayPopup = function () {

        // Create global element references
        this.closeButton = null;
        //  this.modal = null;
        //  this.pay = null;
        this.credipayIframe = null;
        this.stringValues;
        this.baseUrl = "https://localhost:7001/";
        this.id = 'credipay' + randomId();
        // Determine proper prefix
        //  this.transitionEnd = transitionSelect();

        // Define option defaults
        var defaults = {
            id: this.id,
            key: '',
            amount: 0,
            splitObj: [],
            email: '',
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            orderId: '',
            success: function () { },
            error: function () { },
            close: function () { },
            ref: '',
            client: document.location.origin
        }
        // Create options by extending defaults with the passed in arugments
        if (arguments[0] && typeof arguments[0] === "object") {
            this.options = extendDefaults(defaults, arguments[0]);
        }

    }
    credipayPopup.prototype.openCredipayPopup = function () {
        pop = this;
        buildIframe.call(this);
    }
    function b64EncodeUnicode(str) {
        // first we use encodeURIComponent to get percent-encoded UTF-8,
        // then we convert the percent encodings into raw bytes which
        // can be fed into btoa.
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
            function toSolidBytes(match, p1) {
                return String.fromCharCode('0x' + p1);
            }));
    };
    function buildIframe() {
        this.stringValues = JSON.stringify(this.options);
        this.stringValues = b64EncodeUnicode(this.stringValues);
        this.credipayIframe = document.createElement('iframe');
        this.credipayIframe.style.top = "0px";
        this.credipayIframe.style.position = "absolute";
        this.credipayIframe.style.left = "0px";
        this.credipayIframe.style.width = "100%";
        this.credipayIframe.style.height = "100%";
        this.credipayIframe.setAttribute("frameborder", 'no');
        this.credipayIframe.style.borderTop = "1px solid #ffa500";
        this.credipayIframe.setAttribute("allowtransparency", true);
        this.credipayIframe.style.zIndex = '999';
        this.credipayIframe.setAttribute("id", this.options.id);
        this.credipayIframe.src = this.baseUrl + "?credipaypopcall=" + this.stringValues;
        document.body.appendChild(this.credipayIframe);
    }
    function extendDefaults(source, properties) {
        var property;
        for (property in properties) {
            if (properties.hasOwnProperty(property)) {
                source[property] = properties[property];
            }
        }
        return source;
    }
    function isFunction(functionToCheck) {
        return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
    }
    function success(data) {
        if (isFunction(pop.options.success)) {
            close.call(pop)
            setTimeout(function () { pop.options.success.call(pop, data) }, 1000);
        }
    }
    function error(data) {
        if (isFunction(pop.options.error)) {
            pop.options.error.call(pop, data);
        }
    }
    function close() {
        var child = document.getElementById(pop.options.id);
        child.parentElement.removeChild(child);
    }
    function randomId() {
        for (var text = "", possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", i = 0; i < 5; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        return text
    }
    if (window.addEventListener) {
        window.addEventListener('message',  (event) => {
            if (event.origin === "https://localhost:7001") {
                var msg = JSON.parse(event);
                if (msg.message == "success") {
                    success.call({ paymentRef: msg.transactionReference });
                    // success.call(pop, { paymentRef: "success" })

                }
                if (msg.message == "error") {
                    error.call({ error: msg.error });
                }
                if (msg.message == "close") {
                    close.call()
                }

            }
            else {
               // alert('Origin not allowed!');
                return;
            }

        }, false);
    }
    else {
        window.attachEvent('onmessage',  (event) => {
            if (event.origin === "https://localhost:7001") {
                var msg = JSON.parse(event);
                if (msg.message == "success") {
                    success.call({ paymentRef: msg.transactionReference });
                    // success.call(pop, { paymentRef: "success" })

                }
                if (msg.message == "error") {
                    error.call({ error: msg.error });
                }
                if (msg.message == "close") {
                    close.call()
                }

            }
            else {
                //alert('Origin not allowed!');
                return;
            }
        }, false);
    }

}());
